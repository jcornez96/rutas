// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.jcornez.ruta.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import es.jcornez.ruta.entidad.Ciudad;
import es.jcornez.ruta.entidad.Pais;
import es.jcornez.ruta.entidad.QCiudad;
import es.jcornez.ruta.repository.CiudadRepositoryCustom;
import es.jcornez.ruta.repository.CiudadRepositoryImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect CiudadRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: CiudadRepositoryImpl implements CiudadRepositoryCustom;
    
    declare @type: CiudadRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CiudadRepositoryImpl.NOMBRE = "nombre";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String CiudadRepositoryImpl.PAIS = "pais";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Ciudad> CiudadRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QCiudad ciudad = QCiudad.ciudad;
        
        JPQLQuery<Ciudad> query = from(ciudad);
        
        Path<?>[] paths = new Path<?>[] {ciudad.nombre,ciudad.pais};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NOMBRE, ciudad.nombre)
			.map(PAIS, ciudad.pais);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, ciudad);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param pais
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Ciudad> CiudadRepositoryImpl.findByPais(Pais pais, GlobalSearch globalSearch, Pageable pageable) {
        
        QCiudad ciudad = QCiudad.ciudad;
        
        JPQLQuery<Ciudad> query = from(ciudad);
        
        Assert.notNull(pais, "pais is required");
        
        query.where(ciudad.pais.eq(pais));
        Path<?>[] paths = new Path<?>[] {ciudad.nombre,ciudad.pais};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NOMBRE, ciudad.nombre)
			.map(PAIS, ciudad.pais);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, ciudad);
    }
    
}
