// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.jcornez.ruta.repository;

import com.querydsl.core.BooleanBuilder;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import es.jcornez.ruta.entidad.Ciudad;
import es.jcornez.ruta.entidad.QUsuario;
import es.jcornez.ruta.entidad.TipoUsuario;
import es.jcornez.ruta.entidad.Usuario;
import es.jcornez.ruta.model.entity.FilterConfigBean;
import es.jcornez.ruta.repository.UsuarioRepositoryCustom;
import es.jcornez.ruta.repository.UsuarioRepositoryImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect UsuarioRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: UsuarioRepositoryImpl implements UsuarioRepositoryCustom;
    
    declare @type: UsuarioRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String UsuarioRepositoryImpl.TELEFONO = "telefono";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String UsuarioRepositoryImpl.NOMBRE = "nombre";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String UsuarioRepositoryImpl.APELLIDOS = "apellidos";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String UsuarioRepositoryImpl.FECHA_NACIMIENTO = "fechaNacimiento";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String UsuarioRepositoryImpl.GENERO = "genero";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String UsuarioRepositoryImpl.CODIGO_POSTAL = "codigoPostal";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String UsuarioRepositoryImpl.FECHA_ALTA = "fechaAlta";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String UsuarioRepositoryImpl.CIUDAD = "ciudad";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String UsuarioRepositoryImpl.TIPO_USUARIO = "tipoUsuario";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Usuario> UsuarioRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QUsuario usuario = QUsuario.usuario;
        
        JPQLQuery<Usuario> query = from(usuario);
        
        Path<?>[] paths = new Path<?>[] {usuario.telefono,usuario.nombre,usuario.apellidos,usuario.fechaNacimiento,usuario.genero,usuario.codigoPostal,usuario.fechaAlta,usuario.ciudad,usuario.tipoUsuario};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TELEFONO, usuario.telefono)
			.map(NOMBRE, usuario.nombre)
			.map(APELLIDOS, usuario.apellidos)
			.map(FECHA_NACIMIENTO, usuario.fechaNacimiento)
			.map(GENERO, usuario.genero)
			.map(CODIGO_POSTAL, usuario.codigoPostal)
			.map(FECHA_ALTA, usuario.fechaAlta)
			.map(CIUDAD, usuario.ciudad)
			.map(TIPO_USUARIO, usuario.tipoUsuario);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, usuario);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ciudad
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Usuario> UsuarioRepositoryImpl.findByCiudad(Ciudad ciudad, GlobalSearch globalSearch, Pageable pageable) {
        
        QUsuario usuario = QUsuario.usuario;
        
        JPQLQuery<Usuario> query = from(usuario);
        
        Assert.notNull(ciudad, "ciudad is required");
        
        query.where(usuario.ciudad.eq(ciudad));
        Path<?>[] paths = new Path<?>[] {usuario.telefono,usuario.nombre,usuario.apellidos,usuario.fechaNacimiento,usuario.genero,usuario.codigoPostal,usuario.fechaAlta,usuario.ciudad,usuario.tipoUsuario};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TELEFONO, usuario.telefono)
			.map(NOMBRE, usuario.nombre)
			.map(APELLIDOS, usuario.apellidos)
			.map(FECHA_NACIMIENTO, usuario.fechaNacimiento)
			.map(GENERO, usuario.genero)
			.map(CODIGO_POSTAL, usuario.codigoPostal)
			.map(FECHA_ALTA, usuario.fechaAlta)
			.map(CIUDAD, usuario.ciudad)
			.map(TIPO_USUARIO, usuario.tipoUsuario);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, usuario);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param tipoUsuario
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Usuario> UsuarioRepositoryImpl.findByTipoUsuario(TipoUsuario tipoUsuario, GlobalSearch globalSearch, Pageable pageable) {
        
        QUsuario usuario = QUsuario.usuario;
        
        JPQLQuery<Usuario> query = from(usuario);
        
        Assert.notNull(tipoUsuario, "tipoUsuario is required");
        
        query.where(usuario.tipoUsuario.eq(tipoUsuario));
        Path<?>[] paths = new Path<?>[] {usuario.telefono,usuario.nombre,usuario.apellidos,usuario.fechaNacimiento,usuario.genero,usuario.codigoPostal,usuario.fechaAlta,usuario.ciudad,usuario.tipoUsuario};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TELEFONO, usuario.telefono)
			.map(NOMBRE, usuario.nombre)
			.map(APELLIDOS, usuario.apellidos)
			.map(FECHA_NACIMIENTO, usuario.fechaNacimiento)
			.map(GENERO, usuario.genero)
			.map(CODIGO_POSTAL, usuario.codigoPostal)
			.map(FECHA_ALTA, usuario.fechaAlta)
			.map(CIUDAD, usuario.ciudad)
			.map(TIPO_USUARIO, usuario.tipoUsuario);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, usuario);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param formBean
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Usuario> UsuarioRepositoryImpl.queryById(FilterConfigBean formBean, GlobalSearch globalSearch, Pageable pageable) {
        
        QUsuario usuario = QUsuario.usuario;
        
        JPQLQuery<Usuario> query = from(usuario);
        
        if (formBean != null) {
        BooleanBuilder searchCondition = new BooleanBuilder();
                if (formBean.getId() != null) {
                        searchCondition.and(usuario.id.eq(formBean.getId()));
                }
        if (searchCondition.hasValue()) {
            query.where(searchCondition);
        }
        }
        
        Path<?>[] paths = new Path<?>[] {usuario.telefono,usuario.nombre,usuario.apellidos,usuario.fechaNacimiento,usuario.genero,usuario.codigoPostal,usuario.fechaAlta,usuario.ciudad,usuario.tipoUsuario};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TELEFONO, usuario.telefono)
			.map(NOMBRE, usuario.nombre)
			.map(APELLIDOS, usuario.apellidos)
			.map(FECHA_NACIMIENTO, usuario.fechaNacimiento)
			.map(GENERO, usuario.genero)
			.map(CODIGO_POSTAL, usuario.codigoPostal)
			.map(FECHA_ALTA, usuario.fechaAlta)
			.map(CIUDAD, usuario.ciudad)
			.map(TIPO_USUARIO, usuario.tipoUsuario);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, usuario);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param formBean
     * @return Long
     */
    public long UsuarioRepositoryImpl.countById(FilterConfigBean formBean) {
        
        QUsuario usuario = QUsuario.usuario;
        
        JPQLQuery<Usuario> query = from(usuario);
        
        BooleanBuilder searchCondition = new BooleanBuilder();
                if (formBean.getId() != null) {
                        searchCondition.and(usuario.id.eq(formBean.getId()));
                }
        if (searchCondition.hasValue()) {
            query.where(searchCondition);
        }
        return query.fetchCount();
    }
    
}
