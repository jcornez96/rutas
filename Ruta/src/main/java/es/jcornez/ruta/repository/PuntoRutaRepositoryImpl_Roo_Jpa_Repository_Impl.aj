// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.jcornez.ruta.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import es.jcornez.ruta.entidad.PuntoRuta;
import es.jcornez.ruta.entidad.QPuntoRuta;
import es.jcornez.ruta.entidad.Ruta;
import es.jcornez.ruta.repository.PuntoRutaRepositoryCustom;
import es.jcornez.ruta.repository.PuntoRutaRepositoryImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect PuntoRutaRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: PuntoRutaRepositoryImpl implements PuntoRutaRepositoryCustom;
    
    declare @type: PuntoRutaRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String PuntoRutaRepositoryImpl.ORDEN = "orden";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String PuntoRutaRepositoryImpl.LONGITUD = "longitud";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String PuntoRutaRepositoryImpl.LATITUD = "latitud";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String PuntoRutaRepositoryImpl.COMENTARIO = "comentario";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String PuntoRutaRepositoryImpl.RUTA = "ruta";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<PuntoRuta> PuntoRutaRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QPuntoRuta puntoRuta = QPuntoRuta.puntoRuta;
        
        JPQLQuery<PuntoRuta> query = from(puntoRuta);
        
        Path<?>[] paths = new Path<?>[] {puntoRuta.orden,puntoRuta.longitud,puntoRuta.latitud,puntoRuta.comentario,puntoRuta.ruta};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(ORDEN, puntoRuta.orden)
			.map(LONGITUD, puntoRuta.longitud)
			.map(LATITUD, puntoRuta.latitud)
			.map(COMENTARIO, puntoRuta.comentario)
			.map(RUTA, puntoRuta.ruta);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, puntoRuta);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ruta
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<PuntoRuta> PuntoRutaRepositoryImpl.findByRuta(Ruta ruta, GlobalSearch globalSearch, Pageable pageable) {
        
        QPuntoRuta puntoRuta = QPuntoRuta.puntoRuta;
        
        JPQLQuery<PuntoRuta> query = from(puntoRuta);
        
        Assert.notNull(ruta, "ruta is required");
        
        query.where(puntoRuta.ruta.eq(ruta));
        Path<?>[] paths = new Path<?>[] {puntoRuta.orden,puntoRuta.longitud,puntoRuta.latitud,puntoRuta.comentario,puntoRuta.ruta};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(ORDEN, puntoRuta.orden)
			.map(LONGITUD, puntoRuta.longitud)
			.map(LATITUD, puntoRuta.latitud)
			.map(COMENTARIO, puntoRuta.comentario)
			.map(RUTA, puntoRuta.ruta);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, puntoRuta);
    }
    
}
