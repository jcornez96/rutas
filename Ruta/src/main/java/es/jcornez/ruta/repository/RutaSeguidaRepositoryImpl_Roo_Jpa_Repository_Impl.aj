// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.jcornez.ruta.repository;

import com.querydsl.core.BooleanBuilder;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import es.jcornez.ruta.entidad.QRutaSeguida;
import es.jcornez.ruta.entidad.Ruta;
import es.jcornez.ruta.entidad.RutaSeguida;
import es.jcornez.ruta.entidad.Usuario;
import es.jcornez.ruta.model.entity.FilterConfigBean;
import es.jcornez.ruta.repository.RutaSeguidaRepositoryCustom;
import es.jcornez.ruta.repository.RutaSeguidaRepositoryImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect RutaSeguidaRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: RutaSeguidaRepositoryImpl implements RutaSeguidaRepositoryCustom;
    
    declare @type: RutaSeguidaRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String RutaSeguidaRepositoryImpl.FECHA_SEGUIMIENTO = "fechaSeguimiento";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String RutaSeguidaRepositoryImpl.RUTA = "ruta";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String RutaSeguidaRepositoryImpl.USUARIO = "usuario";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<RutaSeguida> RutaSeguidaRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QRutaSeguida rutaSeguida = QRutaSeguida.rutaSeguida;
        
        JPQLQuery<RutaSeguida> query = from(rutaSeguida);
        
        Path<?>[] paths = new Path<?>[] {rutaSeguida.fechaSeguimiento,rutaSeguida.ruta,rutaSeguida.usuario};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(FECHA_SEGUIMIENTO, rutaSeguida.fechaSeguimiento)
			.map(RUTA, rutaSeguida.ruta)
			.map(USUARIO, rutaSeguida.usuario);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, rutaSeguida);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ruta
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<RutaSeguida> RutaSeguidaRepositoryImpl.findByRuta(Ruta ruta, GlobalSearch globalSearch, Pageable pageable) {
        
        QRutaSeguida rutaSeguida = QRutaSeguida.rutaSeguida;
        
        JPQLQuery<RutaSeguida> query = from(rutaSeguida);
        
        Assert.notNull(ruta, "ruta is required");
        
        query.where(rutaSeguida.ruta.eq(ruta));
        Path<?>[] paths = new Path<?>[] {rutaSeguida.fechaSeguimiento,rutaSeguida.ruta,rutaSeguida.usuario};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(FECHA_SEGUIMIENTO, rutaSeguida.fechaSeguimiento)
			.map(RUTA, rutaSeguida.ruta)
			.map(USUARIO, rutaSeguida.usuario);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, rutaSeguida);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuario
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<RutaSeguida> RutaSeguidaRepositoryImpl.findByUsuario(Usuario usuario, GlobalSearch globalSearch, Pageable pageable) {
        
        QRutaSeguida rutaSeguida = QRutaSeguida.rutaSeguida;
        
        JPQLQuery<RutaSeguida> query = from(rutaSeguida);
        
        Assert.notNull(usuario, "usuario is required");
        
        query.where(rutaSeguida.usuario.eq(usuario));
        Path<?>[] paths = new Path<?>[] {rutaSeguida.fechaSeguimiento,rutaSeguida.ruta,rutaSeguida.usuario};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(FECHA_SEGUIMIENTO, rutaSeguida.fechaSeguimiento)
			.map(RUTA, rutaSeguida.ruta)
			.map(USUARIO, rutaSeguida.usuario);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, rutaSeguida);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param formBean
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<RutaSeguida> RutaSeguidaRepositoryImpl.queryById(FilterConfigBean formBean, GlobalSearch globalSearch, Pageable pageable) {
        
        QRutaSeguida rutaSeguida = QRutaSeguida.rutaSeguida;
        
        JPQLQuery<RutaSeguida> query = from(rutaSeguida);
        
        if (formBean != null) {
        BooleanBuilder searchCondition = new BooleanBuilder();
                if (formBean.getId() != null) {
                        searchCondition.and(rutaSeguida.id.eq(formBean.getId()));
                }
        if (searchCondition.hasValue()) {
            query.where(searchCondition);
        }
        }
        
        Path<?>[] paths = new Path<?>[] {rutaSeguida.fechaSeguimiento,rutaSeguida.ruta,rutaSeguida.usuario};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(FECHA_SEGUIMIENTO, rutaSeguida.fechaSeguimiento)
			.map(RUTA, rutaSeguida.ruta)
			.map(USUARIO, rutaSeguida.usuario);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, rutaSeguida);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param formBean
     * @return Long
     */
    public long RutaSeguidaRepositoryImpl.countById(FilterConfigBean formBean) {
        
        QRutaSeguida rutaSeguida = QRutaSeguida.rutaSeguida;
        
        JPQLQuery<RutaSeguida> query = from(rutaSeguida);
        
        BooleanBuilder searchCondition = new BooleanBuilder();
                if (formBean.getId() != null) {
                        searchCondition.and(rutaSeguida.id.eq(formBean.getId()));
                }
        if (searchCondition.hasValue()) {
            query.where(searchCondition);
        }
        return query.fetchCount();
    }
    
}
