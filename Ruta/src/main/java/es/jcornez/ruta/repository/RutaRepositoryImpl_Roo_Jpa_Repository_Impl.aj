// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.jcornez.ruta.repository;

import com.querydsl.core.BooleanBuilder;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import es.jcornez.ruta.entidad.Ciudad;
import es.jcornez.ruta.entidad.QRuta;
import es.jcornez.ruta.entidad.Ruta;
import es.jcornez.ruta.entidad.TipoRuta;
import es.jcornez.ruta.entidad.Usuario;
import es.jcornez.ruta.model.entity.FilterConfigBean;
import es.jcornez.ruta.repository.RutaRepositoryCustom;
import es.jcornez.ruta.repository.RutaRepositoryImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect RutaRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: RutaRepositoryImpl implements RutaRepositoryCustom;
    
    declare @type: RutaRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String RutaRepositoryImpl.NOMBRE = "nombre";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String RutaRepositoryImpl.DESCRIPCION = "descripcion";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String RutaRepositoryImpl.FECHA_CREACION = "fechaCreacion";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String RutaRepositoryImpl.USUARIO = "usuario";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String RutaRepositoryImpl.CIUDAD = "ciudad";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String RutaRepositoryImpl.TIPO_RUTA = "tipoRuta";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Ruta> RutaRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QRuta ruta = QRuta.ruta;
        
        JPQLQuery<Ruta> query = from(ruta);
        
        Path<?>[] paths = new Path<?>[] {ruta.nombre,ruta.descripcion,ruta.fechaCreacion,ruta.usuario,ruta.ciudad,ruta.tipoRuta};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NOMBRE, ruta.nombre)
			.map(DESCRIPCION, ruta.descripcion)
			.map(FECHA_CREACION, ruta.fechaCreacion)
			.map(USUARIO, ruta.usuario)
			.map(CIUDAD, ruta.ciudad)
			.map(TIPO_RUTA, ruta.tipoRuta);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, ruta);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ciudad
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Ruta> RutaRepositoryImpl.findByCiudad(Ciudad ciudad, GlobalSearch globalSearch, Pageable pageable) {
        
        QRuta ruta = QRuta.ruta;
        
        JPQLQuery<Ruta> query = from(ruta);
        
        Assert.notNull(ciudad, "ciudad is required");
        
        query.where(ruta.ciudad.eq(ciudad));
        Path<?>[] paths = new Path<?>[] {ruta.nombre,ruta.descripcion,ruta.fechaCreacion,ruta.usuario,ruta.ciudad,ruta.tipoRuta};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NOMBRE, ruta.nombre)
			.map(DESCRIPCION, ruta.descripcion)
			.map(FECHA_CREACION, ruta.fechaCreacion)
			.map(USUARIO, ruta.usuario)
			.map(CIUDAD, ruta.ciudad)
			.map(TIPO_RUTA, ruta.tipoRuta);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, ruta);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param tipoRuta
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Ruta> RutaRepositoryImpl.findByTipoRuta(TipoRuta tipoRuta, GlobalSearch globalSearch, Pageable pageable) {
        
        QRuta ruta = QRuta.ruta;
        
        JPQLQuery<Ruta> query = from(ruta);
        
        Assert.notNull(tipoRuta, "tipoRuta is required");
        
        query.where(ruta.tipoRuta.eq(tipoRuta));
        Path<?>[] paths = new Path<?>[] {ruta.nombre,ruta.descripcion,ruta.fechaCreacion,ruta.usuario,ruta.ciudad,ruta.tipoRuta};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NOMBRE, ruta.nombre)
			.map(DESCRIPCION, ruta.descripcion)
			.map(FECHA_CREACION, ruta.fechaCreacion)
			.map(USUARIO, ruta.usuario)
			.map(CIUDAD, ruta.ciudad)
			.map(TIPO_RUTA, ruta.tipoRuta);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, ruta);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuario
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Ruta> RutaRepositoryImpl.findByUsuario(Usuario usuario, GlobalSearch globalSearch, Pageable pageable) {
        
        QRuta ruta = QRuta.ruta;
        
        JPQLQuery<Ruta> query = from(ruta);
        
        Assert.notNull(usuario, "usuario is required");
        
        query.where(ruta.usuario.eq(usuario));
        Path<?>[] paths = new Path<?>[] {ruta.nombre,ruta.descripcion,ruta.fechaCreacion,ruta.usuario,ruta.ciudad,ruta.tipoRuta};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NOMBRE, ruta.nombre)
			.map(DESCRIPCION, ruta.descripcion)
			.map(FECHA_CREACION, ruta.fechaCreacion)
			.map(USUARIO, ruta.usuario)
			.map(CIUDAD, ruta.ciudad)
			.map(TIPO_RUTA, ruta.tipoRuta);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, ruta);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param formBean
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Ruta> RutaRepositoryImpl.queryById(FilterConfigBean formBean, GlobalSearch globalSearch, Pageable pageable) {
        
        QRuta ruta = QRuta.ruta;
        
        JPQLQuery<Ruta> query = from(ruta);
        
        if (formBean != null) {
        BooleanBuilder searchCondition = new BooleanBuilder();
                if (formBean.getId() != null) {
                        searchCondition.and(ruta.id.eq(formBean.getId()));
                }
        if (searchCondition.hasValue()) {
            query.where(searchCondition);
        }
        }
        
        Path<?>[] paths = new Path<?>[] {ruta.nombre,ruta.descripcion,ruta.fechaCreacion,ruta.usuario,ruta.ciudad,ruta.tipoRuta};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NOMBRE, ruta.nombre)
			.map(DESCRIPCION, ruta.descripcion)
			.map(FECHA_CREACION, ruta.fechaCreacion)
			.map(USUARIO, ruta.usuario)
			.map(CIUDAD, ruta.ciudad)
			.map(TIPO_RUTA, ruta.tipoRuta);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, ruta);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param formBean
     * @return Long
     */
    public long RutaRepositoryImpl.countById(FilterConfigBean formBean) {
        
        QRuta ruta = QRuta.ruta;
        
        JPQLQuery<Ruta> query = from(ruta);
        
        BooleanBuilder searchCondition = new BooleanBuilder();
                if (formBean.getId() != null) {
                        searchCondition.and(ruta.id.eq(formBean.getId()));
                }
        if (searchCondition.hasValue()) {
            query.where(searchCondition);
        }
        return query.fetchCount();
    }
    
}
