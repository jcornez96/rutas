// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.jcornez.ruta.service.impl;

import es.jcornez.ruta.entidad.TipoUsuario;
import es.jcornez.ruta.entidad.Usuario;
import es.jcornez.ruta.repository.TipoUsuarioRepository;
import es.jcornez.ruta.service.api.UsuarioService;
import es.jcornez.ruta.service.impl.TipoUsuarioServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect TipoUsuarioServiceImpl_Roo_Service_Impl {
    
    declare @type: TipoUsuarioServiceImpl: @Service;
    
    declare @type: TipoUsuarioServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private TipoUsuarioRepository TipoUsuarioServiceImpl.tipoUsuarioRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private UsuarioService TipoUsuarioServiceImpl.usuarioService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param tipoUsuarioRepository
     * @param usuarioService
     */
    @Autowired
    public TipoUsuarioServiceImpl.new(TipoUsuarioRepository tipoUsuarioRepository, @Lazy UsuarioService usuarioService) {
        setTipoUsuarioRepository(tipoUsuarioRepository);
        setUsuarioService(usuarioService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return TipoUsuarioRepository
     */
    public TipoUsuarioRepository TipoUsuarioServiceImpl.getTipoUsuarioRepository() {
        return tipoUsuarioRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param tipoUsuarioRepository
     */
    public void TipoUsuarioServiceImpl.setTipoUsuarioRepository(TipoUsuarioRepository tipoUsuarioRepository) {
        this.tipoUsuarioRepository = tipoUsuarioRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return UsuarioService
     */
    public UsuarioService TipoUsuarioServiceImpl.getUsuarioService() {
        return usuarioService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuarioService
     */
    public void TipoUsuarioServiceImpl.setUsuarioService(UsuarioService usuarioService) {
        this.usuarioService = usuarioService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param tipoUsuario
     * @param usuariosToAdd
     * @return TipoUsuario
     */
    @Transactional
    public TipoUsuario TipoUsuarioServiceImpl.addToUsuarios(TipoUsuario tipoUsuario, Iterable<Long> usuariosToAdd) {
        List<Usuario> usuarios = getUsuarioService().findAll(usuariosToAdd);
        tipoUsuario.addToUsuarios(usuarios);
        return getTipoUsuarioRepository().save(tipoUsuario);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param tipoUsuario
     * @param usuariosToRemove
     * @return TipoUsuario
     */
    @Transactional
    public TipoUsuario TipoUsuarioServiceImpl.removeFromUsuarios(TipoUsuario tipoUsuario, Iterable<Long> usuariosToRemove) {
        List<Usuario> usuarios = getUsuarioService().findAll(usuariosToRemove);
        tipoUsuario.removeFromUsuarios(usuarios);
        return getTipoUsuarioRepository().save(tipoUsuario);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param tipoUsuario
     * @param usuarios
     * @return TipoUsuario
     */
    @Transactional
    public TipoUsuario TipoUsuarioServiceImpl.setUsuarios(TipoUsuario tipoUsuario, Iterable<Long> usuarios) {
        List<Usuario> items = getUsuarioService().findAll(usuarios);
        Set<Usuario> currents = tipoUsuario.getUsuarios();
        Set<Usuario> toRemove = new HashSet<Usuario>();
        for (Iterator<Usuario> iterator = currents.iterator(); iterator.hasNext();) {
            Usuario nextUsuario = iterator.next();
            if (items.contains(nextUsuario)) {
                items.remove(nextUsuario);
            } else {
                toRemove.add(nextUsuario);
            }
        }
        tipoUsuario.removeFromUsuarios(toRemove);
        tipoUsuario.addToUsuarios(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        tipoUsuario.setVersion(tipoUsuario.getVersion() + 1);
        return getTipoUsuarioRepository().save(tipoUsuario);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param tipoUsuario
     */
    @Transactional
    public void TipoUsuarioServiceImpl.delete(TipoUsuario tipoUsuario) {
        // Clear bidirectional one-to-many parent relationship with Usuario
        for (Usuario item : tipoUsuario.getUsuarios()) {
            item.setTipoUsuario(null);
        }
        
        getTipoUsuarioRepository().delete(tipoUsuario);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<TipoUsuario> TipoUsuarioServiceImpl.save(Iterable<TipoUsuario> entities) {
        return getTipoUsuarioRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void TipoUsuarioServiceImpl.delete(Iterable<Long> ids) {
        List<TipoUsuario> toDelete = getTipoUsuarioRepository().findAll(ids);
        getTipoUsuarioRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return TipoUsuario
     */
    @Transactional
    public TipoUsuario TipoUsuarioServiceImpl.save(TipoUsuario entity) {
        return getTipoUsuarioRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return TipoUsuario
     */
    public TipoUsuario TipoUsuarioServiceImpl.findOne(Long id) {
        return getTipoUsuarioRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return TipoUsuario
     */
    public TipoUsuario TipoUsuarioServiceImpl.findOneForUpdate(Long id) {
        return getTipoUsuarioRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<TipoUsuario> TipoUsuarioServiceImpl.findAll(Iterable<Long> ids) {
        return getTipoUsuarioRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<TipoUsuario> TipoUsuarioServiceImpl.findAll() {
        return getTipoUsuarioRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long TipoUsuarioServiceImpl.count() {
        return getTipoUsuarioRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<TipoUsuario> TipoUsuarioServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getTipoUsuarioRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<TipoUsuario> TipoUsuarioServiceImpl.getEntityType() {
        return TipoUsuario.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> TipoUsuarioServiceImpl.getIdType() {
        return Long.class;
    }
    
}
