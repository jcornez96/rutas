// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.jcornez.ruta.service.impl;

import es.jcornez.ruta.entidad.Ciudad;
import es.jcornez.ruta.entidad.Ruta;
import es.jcornez.ruta.entidad.RutaSeguida;
import es.jcornez.ruta.entidad.TipoUsuario;
import es.jcornez.ruta.entidad.Usuario;
import es.jcornez.ruta.model.entity.FilterConfigBean;
import es.jcornez.ruta.repository.UsuarioRepository;
import es.jcornez.ruta.service.api.RutaSeguidaService;
import es.jcornez.ruta.service.api.RutaService;
import es.jcornez.ruta.service.impl.UsuarioServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect UsuarioServiceImpl_Roo_Service_Impl {
    
    declare @type: UsuarioServiceImpl: @Service;
    
    declare @type: UsuarioServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private UsuarioRepository UsuarioServiceImpl.usuarioRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private RutaService UsuarioServiceImpl.rutaService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private RutaSeguidaService UsuarioServiceImpl.rutaSeguidaService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param usuarioRepository
     * @param rutaService
     * @param rutaSeguidaService
     */
    @Autowired
    public UsuarioServiceImpl.new(UsuarioRepository usuarioRepository, @Lazy RutaService rutaService, @Lazy RutaSeguidaService rutaSeguidaService) {
        setUsuarioRepository(usuarioRepository);
        setRutaService(rutaService);
        setRutaSeguidaService(rutaSeguidaService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return UsuarioRepository
     */
    public UsuarioRepository UsuarioServiceImpl.getUsuarioRepository() {
        return usuarioRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuarioRepository
     */
    public void UsuarioServiceImpl.setUsuarioRepository(UsuarioRepository usuarioRepository) {
        this.usuarioRepository = usuarioRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return RutaService
     */
    public RutaService UsuarioServiceImpl.getRutaService() {
        return rutaService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param rutaService
     */
    public void UsuarioServiceImpl.setRutaService(RutaService rutaService) {
        this.rutaService = rutaService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return RutaSeguidaService
     */
    public RutaSeguidaService UsuarioServiceImpl.getRutaSeguidaService() {
        return rutaSeguidaService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param rutaSeguidaService
     */
    public void UsuarioServiceImpl.setRutaSeguidaService(RutaSeguidaService rutaSeguidaService) {
        this.rutaSeguidaService = rutaSeguidaService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuario
     * @param rutasToAdd
     * @return Usuario
     */
    @Transactional
    public Usuario UsuarioServiceImpl.addToRutas(Usuario usuario, Iterable<Long> rutasToAdd) {
        List<Ruta> rutas = getRutaService().findAll(rutasToAdd);
        usuario.addToRutas(rutas);
        return getUsuarioRepository().save(usuario);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuario
     * @param rutasSeguidasToAdd
     * @return Usuario
     */
    @Transactional
    public Usuario UsuarioServiceImpl.addToRutasSeguidas(Usuario usuario, Iterable<Long> rutasSeguidasToAdd) {
        List<RutaSeguida> rutasSeguidas = getRutaSeguidaService().findAll(rutasSeguidasToAdd);
        usuario.addToRutasSeguidas(rutasSeguidas);
        return getUsuarioRepository().save(usuario);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuario
     * @param rutasToRemove
     * @return Usuario
     */
    @Transactional
    public Usuario UsuarioServiceImpl.removeFromRutas(Usuario usuario, Iterable<Long> rutasToRemove) {
        List<Ruta> rutas = getRutaService().findAll(rutasToRemove);
        usuario.removeFromRutas(rutas);
        return getUsuarioRepository().save(usuario);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuario
     * @param rutasSeguidasToRemove
     * @return Usuario
     */
    @Transactional
    public Usuario UsuarioServiceImpl.removeFromRutasSeguidas(Usuario usuario, Iterable<Long> rutasSeguidasToRemove) {
        List<RutaSeguida> rutasSeguidas = getRutaSeguidaService().findAll(rutasSeguidasToRemove);
        usuario.removeFromRutasSeguidas(rutasSeguidas);
        return getUsuarioRepository().save(usuario);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuario
     * @param rutas
     * @return Usuario
     */
    @Transactional
    public Usuario UsuarioServiceImpl.setRutas(Usuario usuario, Iterable<Long> rutas) {
        List<Ruta> items = getRutaService().findAll(rutas);
        Set<Ruta> currents = usuario.getRutas();
        Set<Ruta> toRemove = new HashSet<Ruta>();
        for (Iterator<Ruta> iterator = currents.iterator(); iterator.hasNext();) {
            Ruta nextRuta = iterator.next();
            if (items.contains(nextRuta)) {
                items.remove(nextRuta);
            } else {
                toRemove.add(nextRuta);
            }
        }
        usuario.removeFromRutas(toRemove);
        usuario.addToRutas(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        usuario.setVersion(usuario.getVersion() + 1);
        return getUsuarioRepository().save(usuario);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuario
     * @param rutasSeguidas
     * @return Usuario
     */
    @Transactional
    public Usuario UsuarioServiceImpl.setRutasSeguidas(Usuario usuario, Iterable<Long> rutasSeguidas) {
        List<RutaSeguida> items = getRutaSeguidaService().findAll(rutasSeguidas);
        Set<RutaSeguida> currents = usuario.getRutasSeguidas();
        Set<RutaSeguida> toRemove = new HashSet<RutaSeguida>();
        for (Iterator<RutaSeguida> iterator = currents.iterator(); iterator.hasNext();) {
            RutaSeguida nextRutaSeguida = iterator.next();
            if (items.contains(nextRutaSeguida)) {
                items.remove(nextRutaSeguida);
            } else {
                toRemove.add(nextRutaSeguida);
            }
        }
        usuario.removeFromRutasSeguidas(toRemove);
        usuario.addToRutasSeguidas(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        usuario.setVersion(usuario.getVersion() + 1);
        return getUsuarioRepository().save(usuario);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuario
     */
    @Transactional
    public void UsuarioServiceImpl.delete(Usuario usuario) {
        // Clear bidirectional many-to-one child relationship with Ciudad
        if (usuario.getCiudad() != null) {
            usuario.getCiudad().getUsuarios().remove(usuario);
        }
        
        // Clear bidirectional many-to-one child relationship with TipoUsuario
        if (usuario.getTipoUsuario() != null) {
            usuario.getTipoUsuario().getUsuarios().remove(usuario);
        }
        
        // Clear bidirectional one-to-many parent relationship with Ruta
        for (Ruta item : usuario.getRutas()) {
            item.setUsuario(null);
        }
        
        // Clear bidirectional one-to-many parent relationship with RutaSeguida
        for (RutaSeguida item : usuario.getRutasSeguidas()) {
            item.setUsuario(null);
        }
        
        getUsuarioRepository().delete(usuario);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Usuario> UsuarioServiceImpl.save(Iterable<Usuario> entities) {
        return getUsuarioRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void UsuarioServiceImpl.delete(Iterable<Long> ids) {
        List<Usuario> toDelete = getUsuarioRepository().findAll(ids);
        getUsuarioRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Usuario
     */
    @Transactional
    public Usuario UsuarioServiceImpl.save(Usuario entity) {
        return getUsuarioRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Usuario
     */
    public Usuario UsuarioServiceImpl.findOne(Long id) {
        return getUsuarioRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Usuario
     */
    public Usuario UsuarioServiceImpl.findOneForUpdate(Long id) {
        return getUsuarioRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Usuario> UsuarioServiceImpl.findAll(Iterable<Long> ids) {
        return getUsuarioRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Usuario> UsuarioServiceImpl.findAll() {
        return getUsuarioRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long UsuarioServiceImpl.count() {
        return getUsuarioRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Usuario> UsuarioServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getUsuarioRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ciudad
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Usuario> UsuarioServiceImpl.findByCiudad(Ciudad ciudad, GlobalSearch globalSearch, Pageable pageable) {
        return getUsuarioRepository().findByCiudad(ciudad, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param tipoUsuario
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Usuario> UsuarioServiceImpl.findByTipoUsuario(TipoUsuario tipoUsuario, GlobalSearch globalSearch, Pageable pageable) {
        return getUsuarioRepository().findByTipoUsuario(tipoUsuario, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ciudad
     * @return Long
     */
    public long UsuarioServiceImpl.countByCiudad(Ciudad ciudad) {
        return getUsuarioRepository().countByCiudad(ciudad);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param tipoUsuario
     * @return Long
     */
    public long UsuarioServiceImpl.countByTipoUsuario(TipoUsuario tipoUsuario) {
        return getUsuarioRepository().countByTipoUsuario(tipoUsuario);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param formBean
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Usuario> UsuarioServiceImpl.queryById(FilterConfigBean formBean, GlobalSearch globalSearch, Pageable pageable) {
        return getUsuarioRepository().queryById(formBean, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param formBean
     * @return Long
     */
    public long UsuarioServiceImpl.countById(FilterConfigBean formBean) {
        return getUsuarioRepository().countById(formBean);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Usuario> UsuarioServiceImpl.getEntityType() {
        return Usuario.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> UsuarioServiceImpl.getIdType() {
        return Long.class;
    }
    
}
