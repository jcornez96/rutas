// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.jcornez.ruta.service.impl;

import es.jcornez.ruta.entidad.Ciudad;
import es.jcornez.ruta.entidad.Pais;
import es.jcornez.ruta.entidad.Ruta;
import es.jcornez.ruta.entidad.Usuario;
import es.jcornez.ruta.repository.CiudadRepository;
import es.jcornez.ruta.service.api.RutaService;
import es.jcornez.ruta.service.api.UsuarioService;
import es.jcornez.ruta.service.impl.CiudadServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect CiudadServiceImpl_Roo_Service_Impl {
    
    declare @type: CiudadServiceImpl: @Service;
    
    declare @type: CiudadServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private CiudadRepository CiudadServiceImpl.ciudadRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private RutaService CiudadServiceImpl.rutaService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private UsuarioService CiudadServiceImpl.usuarioService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param ciudadRepository
     * @param rutaService
     * @param usuarioService
     */
    @Autowired
    public CiudadServiceImpl.new(CiudadRepository ciudadRepository, @Lazy RutaService rutaService, @Lazy UsuarioService usuarioService) {
        setCiudadRepository(ciudadRepository);
        setRutaService(rutaService);
        setUsuarioService(usuarioService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return CiudadRepository
     */
    public CiudadRepository CiudadServiceImpl.getCiudadRepository() {
        return ciudadRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ciudadRepository
     */
    public void CiudadServiceImpl.setCiudadRepository(CiudadRepository ciudadRepository) {
        this.ciudadRepository = ciudadRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return RutaService
     */
    public RutaService CiudadServiceImpl.getRutaService() {
        return rutaService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param rutaService
     */
    public void CiudadServiceImpl.setRutaService(RutaService rutaService) {
        this.rutaService = rutaService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return UsuarioService
     */
    public UsuarioService CiudadServiceImpl.getUsuarioService() {
        return usuarioService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param usuarioService
     */
    public void CiudadServiceImpl.setUsuarioService(UsuarioService usuarioService) {
        this.usuarioService = usuarioService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ciudad
     * @param rutasToAdd
     * @return Ciudad
     */
    @Transactional
    public Ciudad CiudadServiceImpl.addToRutas(Ciudad ciudad, Iterable<Long> rutasToAdd) {
        List<Ruta> rutas = getRutaService().findAll(rutasToAdd);
        ciudad.addToRutas(rutas);
        return getCiudadRepository().save(ciudad);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ciudad
     * @param usuariosToAdd
     * @return Ciudad
     */
    @Transactional
    public Ciudad CiudadServiceImpl.addToUsuarios(Ciudad ciudad, Iterable<Long> usuariosToAdd) {
        List<Usuario> usuarios = getUsuarioService().findAll(usuariosToAdd);
        ciudad.addToUsuarios(usuarios);
        return getCiudadRepository().save(ciudad);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ciudad
     * @param rutasToRemove
     * @return Ciudad
     */
    @Transactional
    public Ciudad CiudadServiceImpl.removeFromRutas(Ciudad ciudad, Iterable<Long> rutasToRemove) {
        List<Ruta> rutas = getRutaService().findAll(rutasToRemove);
        ciudad.removeFromRutas(rutas);
        return getCiudadRepository().save(ciudad);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ciudad
     * @param usuariosToRemove
     * @return Ciudad
     */
    @Transactional
    public Ciudad CiudadServiceImpl.removeFromUsuarios(Ciudad ciudad, Iterable<Long> usuariosToRemove) {
        List<Usuario> usuarios = getUsuarioService().findAll(usuariosToRemove);
        ciudad.removeFromUsuarios(usuarios);
        return getCiudadRepository().save(ciudad);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ciudad
     * @param rutas
     * @return Ciudad
     */
    @Transactional
    public Ciudad CiudadServiceImpl.setRutas(Ciudad ciudad, Iterable<Long> rutas) {
        List<Ruta> items = getRutaService().findAll(rutas);
        Set<Ruta> currents = ciudad.getRutas();
        Set<Ruta> toRemove = new HashSet<Ruta>();
        for (Iterator<Ruta> iterator = currents.iterator(); iterator.hasNext();) {
            Ruta nextRuta = iterator.next();
            if (items.contains(nextRuta)) {
                items.remove(nextRuta);
            } else {
                toRemove.add(nextRuta);
            }
        }
        ciudad.removeFromRutas(toRemove);
        ciudad.addToRutas(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        ciudad.setVersion(ciudad.getVersion() + 1);
        return getCiudadRepository().save(ciudad);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ciudad
     * @param usuarios
     * @return Ciudad
     */
    @Transactional
    public Ciudad CiudadServiceImpl.setUsuarios(Ciudad ciudad, Iterable<Long> usuarios) {
        List<Usuario> items = getUsuarioService().findAll(usuarios);
        Set<Usuario> currents = ciudad.getUsuarios();
        Set<Usuario> toRemove = new HashSet<Usuario>();
        for (Iterator<Usuario> iterator = currents.iterator(); iterator.hasNext();) {
            Usuario nextUsuario = iterator.next();
            if (items.contains(nextUsuario)) {
                items.remove(nextUsuario);
            } else {
                toRemove.add(nextUsuario);
            }
        }
        ciudad.removeFromUsuarios(toRemove);
        ciudad.addToUsuarios(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        ciudad.setVersion(ciudad.getVersion() + 1);
        return getCiudadRepository().save(ciudad);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ciudad
     */
    @Transactional
    public void CiudadServiceImpl.delete(Ciudad ciudad) {
        // Clear bidirectional many-to-one child relationship with Pais
        if (ciudad.getPais() != null) {
            ciudad.getPais().getCiudades().remove(ciudad);
        }
        
        // Clear bidirectional one-to-many parent relationship with Ruta
        for (Ruta item : ciudad.getRutas()) {
            item.setCiudad(null);
        }
        
        // Clear bidirectional one-to-many parent relationship with Usuario
        for (Usuario item : ciudad.getUsuarios()) {
            item.setCiudad(null);
        }
        
        getCiudadRepository().delete(ciudad);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Ciudad> CiudadServiceImpl.save(Iterable<Ciudad> entities) {
        return getCiudadRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void CiudadServiceImpl.delete(Iterable<Long> ids) {
        List<Ciudad> toDelete = getCiudadRepository().findAll(ids);
        getCiudadRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Ciudad
     */
    @Transactional
    public Ciudad CiudadServiceImpl.save(Ciudad entity) {
        return getCiudadRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Ciudad
     */
    public Ciudad CiudadServiceImpl.findOne(Long id) {
        return getCiudadRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Ciudad
     */
    public Ciudad CiudadServiceImpl.findOneForUpdate(Long id) {
        return getCiudadRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Ciudad> CiudadServiceImpl.findAll(Iterable<Long> ids) {
        return getCiudadRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Ciudad> CiudadServiceImpl.findAll() {
        return getCiudadRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long CiudadServiceImpl.count() {
        return getCiudadRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Ciudad> CiudadServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getCiudadRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param pais
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Ciudad> CiudadServiceImpl.findByPais(Pais pais, GlobalSearch globalSearch, Pageable pageable) {
        return getCiudadRepository().findByPais(pais, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param pais
     * @return Long
     */
    public long CiudadServiceImpl.countByPais(Pais pais) {
        return getCiudadRepository().countByPais(pais);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Ciudad> CiudadServiceImpl.getEntityType() {
        return Ciudad.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> CiudadServiceImpl.getIdType() {
        return Long.class;
    }
    
}
