// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.jcornez.ruta.service.impl;

import es.jcornez.ruta.entidad.Ruta;
import es.jcornez.ruta.entidad.TipoRuta;
import es.jcornez.ruta.repository.TipoRutaRepository;
import es.jcornez.ruta.service.api.RutaService;
import es.jcornez.ruta.service.impl.TipoRutaServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect TipoRutaServiceImpl_Roo_Service_Impl {
    
    declare @type: TipoRutaServiceImpl: @Service;
    
    declare @type: TipoRutaServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private TipoRutaRepository TipoRutaServiceImpl.tipoRutaRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private RutaService TipoRutaServiceImpl.rutaService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param tipoRutaRepository
     * @param rutaService
     */
    @Autowired
    public TipoRutaServiceImpl.new(TipoRutaRepository tipoRutaRepository, @Lazy RutaService rutaService) {
        setTipoRutaRepository(tipoRutaRepository);
        setRutaService(rutaService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return TipoRutaRepository
     */
    public TipoRutaRepository TipoRutaServiceImpl.getTipoRutaRepository() {
        return tipoRutaRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param tipoRutaRepository
     */
    public void TipoRutaServiceImpl.setTipoRutaRepository(TipoRutaRepository tipoRutaRepository) {
        this.tipoRutaRepository = tipoRutaRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return RutaService
     */
    public RutaService TipoRutaServiceImpl.getRutaService() {
        return rutaService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param rutaService
     */
    public void TipoRutaServiceImpl.setRutaService(RutaService rutaService) {
        this.rutaService = rutaService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param tipoRuta
     * @param rutasToAdd
     * @return TipoRuta
     */
    @Transactional
    public TipoRuta TipoRutaServiceImpl.addToRutas(TipoRuta tipoRuta, Iterable<Long> rutasToAdd) {
        List<Ruta> rutas = getRutaService().findAll(rutasToAdd);
        tipoRuta.addToRutas(rutas);
        return getTipoRutaRepository().save(tipoRuta);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param tipoRuta
     * @param rutasToRemove
     * @return TipoRuta
     */
    @Transactional
    public TipoRuta TipoRutaServiceImpl.removeFromRutas(TipoRuta tipoRuta, Iterable<Long> rutasToRemove) {
        List<Ruta> rutas = getRutaService().findAll(rutasToRemove);
        tipoRuta.removeFromRutas(rutas);
        return getTipoRutaRepository().save(tipoRuta);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param tipoRuta
     * @param rutas
     * @return TipoRuta
     */
    @Transactional
    public TipoRuta TipoRutaServiceImpl.setRutas(TipoRuta tipoRuta, Iterable<Long> rutas) {
        List<Ruta> items = getRutaService().findAll(rutas);
        Set<Ruta> currents = tipoRuta.getRutas();
        Set<Ruta> toRemove = new HashSet<Ruta>();
        for (Iterator<Ruta> iterator = currents.iterator(); iterator.hasNext();) {
            Ruta nextRuta = iterator.next();
            if (items.contains(nextRuta)) {
                items.remove(nextRuta);
            } else {
                toRemove.add(nextRuta);
            }
        }
        tipoRuta.removeFromRutas(toRemove);
        tipoRuta.addToRutas(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        tipoRuta.setVersion(tipoRuta.getVersion() + 1);
        return getTipoRutaRepository().save(tipoRuta);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param tipoRuta
     */
    @Transactional
    public void TipoRutaServiceImpl.delete(TipoRuta tipoRuta) {
        // Clear bidirectional one-to-many parent relationship with Ruta
        for (Ruta item : tipoRuta.getRutas()) {
            item.setTipoRuta(null);
        }
        
        getTipoRutaRepository().delete(tipoRuta);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<TipoRuta> TipoRutaServiceImpl.save(Iterable<TipoRuta> entities) {
        return getTipoRutaRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void TipoRutaServiceImpl.delete(Iterable<Long> ids) {
        List<TipoRuta> toDelete = getTipoRutaRepository().findAll(ids);
        getTipoRutaRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return TipoRuta
     */
    @Transactional
    public TipoRuta TipoRutaServiceImpl.save(TipoRuta entity) {
        return getTipoRutaRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return TipoRuta
     */
    public TipoRuta TipoRutaServiceImpl.findOne(Long id) {
        return getTipoRutaRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return TipoRuta
     */
    public TipoRuta TipoRutaServiceImpl.findOneForUpdate(Long id) {
        return getTipoRutaRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<TipoRuta> TipoRutaServiceImpl.findAll(Iterable<Long> ids) {
        return getTipoRutaRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<TipoRuta> TipoRutaServiceImpl.findAll() {
        return getTipoRutaRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long TipoRutaServiceImpl.count() {
        return getTipoRutaRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<TipoRuta> TipoRutaServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getTipoRutaRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<TipoRuta> TipoRutaServiceImpl.getEntityType() {
        return TipoRuta.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> TipoRutaServiceImpl.getIdType() {
        return Long.class;
    }
    
}
